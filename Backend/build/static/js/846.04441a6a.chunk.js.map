{"version":3,"file":"static/js/846.04441a6a.chunk.js","mappings":"4RAOA,MAAMA,EAAgBA,KACpB,MACMC,GAASC,EAAAA,EAAAA,QAAO,OACfC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,IACjCC,GAAWC,EAAAA,EAAAA,MACXC,EAAW,iLAMXC,GAASC,EAAAA,EAAAA,UACb,MACEC,UAAU,EACVC,cAAe,CAAC,SAChBJ,YAAaA,KAEf,CAACA,IAEH,IAAIK,EAAMC,aAAaC,QAAQ,oBAC3BC,EAAWC,KAAKC,MAAML,GAC1B,MAAOM,EAAMC,IAAWf,EAAAA,EAAAA,UAAS,CAC/BF,QAAiB,OAARa,QAAQ,IAARA,OAAQ,EAARA,EAAUb,QACnBkB,YAAqB,OAARL,QAAQ,IAARA,OAAQ,EAARA,EAAUK,cAGnBC,EAAeA,CAACC,EAAOC,KACvBA,EACFJ,EAAQ,IAAKD,EAAM,CAACK,GAAOD,IAE3BnB,EAAWmB,EACb,EAoCF,OACEE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMF,SAAA,EACnBF,EAAAA,EAAAA,KAAA,MAAII,UAAU,OAAMF,SAAC,8BACrBF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QAAMI,UAAU,YAAWF,SAAC,YAC5BF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,OAAMF,UACnBF,EAAAA,EAAAA,KAACK,IAAW,CACVC,IAAK9B,EACLsB,MAAOJ,EAAKhB,QACZ6B,SAAWT,GAAUD,EAAaC,EAAO,WACzCd,OAAQA,EACRwB,SAAU,EACVC,OAASC,GAAe/B,EAAW+B,QAGvCV,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,QAAMI,UAAU,aAAYF,SAAC,iBAC7BF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,OAAMF,UACnBF,EAAAA,EAAAA,KAAA,YACEF,MAAOJ,EAAKE,YACZW,SAAWI,GAAMd,EAAac,EAAEC,OAAOd,MAAO,eAC9CC,KAAK,GACLc,KAAM,GACNC,KAAM,GACNC,GAAG,GACHX,UAAU,eACVrB,YAAW,mrBA+BfiB,EAAAA,EAAAA,KAAA,UACAG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYF,SAAA,EACzBF,EAAAA,EAAAA,KAAA,UACEgB,KAAK,SACLZ,UAAU,UACVa,QAnESC,KACjBrC,EAAS,kBAAkB,EAmEnBsC,MAAO,CAAEC,WAAY,UAAWC,MAAO,SAAUnB,SAClD,cAEQ,aAETF,EAAAA,EAAAA,KAAA,UACEgB,KAAK,SACLC,QAzGWK,WAEU,IADhBX,EAAEY,cACNC,kBACPb,EAAEc,iBACFd,EAAEe,mBAEJf,EAAEc,iBACF,IACE,MAAM,QAAE/C,EAAO,YAAEkB,GAAgBF,EACjC,IAAKhB,IAAYkB,EACf,OAGiB,aADD+B,EAAAA,EAAAA,IAAa,GAADC,OA7CnBC,4BA6C6B,qBAAAD,OAA4B,OAARrC,QAAQ,IAARA,OAAQ,EAARA,EAAUuC,KAAOpC,IACrEqC,QACNpC,EAAQ,CACNjB,QAAS,GACTkB,YAAa,KAEfoC,EAAAA,GAAMC,QAAQ,0CACdC,YAAW,KACTrD,EAAS,kBAAkB,GAC1B,MAEHmD,EAAAA,GAAMG,MAAM,4BAEhB,CAAE,MAAOA,GACPC,QAAQC,IAAIF,EACd,GA+EQhB,MAAO,CAAEC,WAAY,UAAWC,MAAO,QAASiB,YAAa,QAC7DlC,UAAU,UAASF,SACpB,kBAIHF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACuC,EAAAA,GAAc,CAACC,UAAW,UAE5B,EAIP,EAAeC,EAAAA,KAAWlE,E","sources":["views/settings/email/EmailTemplate.jsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport JoditEditor from 'jodit-react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { putFetchData } from 'src/Api'\n\nconst EmailTemplate = () => {\n  const apiUrl = process.env.REACT_APP_API_URL\n  const editor = useRef(null)\n  const [content, setContent] = useState('')\n  const navigate = useNavigate()\n  const placeholder = `Hallo {{ activity.user }}\n\n  Ihre {{ activity.title }} Aktivität ist fällig am {{ activity.due_date }}\n  \n  {{#action_button}}Aktivität ansehen{{/action_button}}`\n\n  const config = useMemo(\n    () => ({\n      readonly: false,\n      removeButtons: ['about'], // Use removeButtons instead of removeAbout\n      placeholder: placeholder,\n    }),\n    [placeholder],\n  )\n  let res = localStorage.getItem('EmailEditDetails')\n  let response = JSON.parse(res)\n  const [data, setData] = useState({\n    content: response?.content,\n    designation: response?.designation,\n  })\n\n  const handleChange = (value, name) => {\n    if (name) {\n      setData({ ...data, [name]: value })\n    } else {\n      setContent(value)\n    }\n  }\n\n  const handleSubmit = async (e) => {\n    const form = e.currentTarget\n    if (form.checkValidity() === false) {\n      e.preventDefault()\n      e.stopPropagation()\n    }\n    e.preventDefault()\n    try {\n      const { content, designation } = data\n      if (!content || !designation) {\n        return\n      }\n      const res = await putFetchData(`${apiUrl}/email/get_email/${response?._id}`, data)\n      if (res.status === 200) {\n        setData({\n          content: '',\n          designation: '',\n        })\n        toast.success('EmailTemplate erfolgreich aktualisiert')\n        setTimeout(() => {\n          navigate('/settings/email')\n        }, 3000)\n      } else {\n        toast.error('Etwas ist schief gelaufen')\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const cancelData = () => {\n    navigate('/settings/email')\n  }\n  return (\n    <>\n      <div className=\"card\">\n        <h5 className=\"mx-3\">E-Mail Vorlage Anmeldung</h5>\n        <hr />\n        <span className=\"mx-3 mb-1\">Inhalt</span>\n        <div className=\"mx-3\">\n          <JoditEditor\n            ref={editor}\n            value={data.content}\n            onChange={(value) => handleChange(value, 'content')}\n            config={config}\n            tabIndex={1}\n            onBlur={(newContent) => setContent(newContent)}\n          />\n        </div>\n        <br />\n\n        <span className=\" mx-3 mb-2\">Platzhalter</span>\n        <div className=\"mx-3\">\n          <textarea\n            value={data.designation}\n            onChange={(e) => handleChange(e.target.value, 'designation')}\n            name=\"\"\n            rows={25}\n            cols={10}\n            id=\"\"\n            className=\"form-control\"\n            placeholder={`\n  {{ Aktivität.Titel }} - Titel\n\n  {{ activity.type }} - Typ der Aktivität\n  \n  {{ activity.due_date }} - Fälligkeitsdatum\n\n  {{ activity.end_date }} - Enddatum\n  \n  {{ activity.reminder_minutes_before }} - Erinnerung\n\n  {{ activity.user }} - Besitzer\n\n  {{ activity.guests }} - Gäste\n  \n  {{ activity.description }} - Beschreibung\n\n  {{ activity.owner_assigned_date }} - Zugewiesenes Datum des Eigentümers\n\n  {{{ activity.note }}} - Notiz\n\n  {{ activity.creator }} - Erstellt von\n\n  {{ activity.reminded_at }} - Datum der gesendeten Erinnerung\n\n  {{ activity.completed_at }} - Erledigt am\n\n  {{ activity.updated_at }} - Aktualisiert am\n  `}\n          ></textarea>\n        </div>\n        <br />\n        <div className=\"text-right\">\n          <button\n            type=\"button\"\n            className=\"btn btn\"\n            onClick={cancelData}\n            style={{ background: '#d04545', color: 'white' }}\n          >\n            Abbrechen\n          </button>\n          &nbsp; &nbsp;\n          <button\n            type=\"button\"\n            onClick={handleSubmit}\n            style={{ background: '#0b5995', color: 'white', marginRight: '15px' }}\n            className=\"btn btn\"\n          >\n            Speichern\n          </button>\n        </div>\n        <br />\n        <ToastContainer autoClose={2000} />\n      </div>\n    </>\n  )\n}\n\nexport default React.memo(EmailTemplate)\n"],"names":["EmailTemplate","editor","useRef","content","setContent","useState","navigate","useNavigate","placeholder","config","useMemo","readonly","removeButtons","res","localStorage","getItem","response","JSON","parse","data","setData","designation","handleChange","value","name","_jsx","_Fragment","children","_jsxs","className","JoditEditor","ref","onChange","tabIndex","onBlur","newContent","e","target","rows","cols","id","type","onClick","cancelData","style","background","color","async","currentTarget","checkValidity","preventDefault","stopPropagation","putFetchData","concat","process","_id","status","toast","success","setTimeout","error","console","log","marginRight","ToastContainer","autoClose","React"],"sourceRoot":""}