{"version":3,"file":"static/js/545.8798f3ea.chunk.js","mappings":"4PAwMA,MAAM,YAAEA,GAAgBC,EAAAA,EAyBxB,EAvBYC,KACV,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,IAYnD,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,UAAU,WAAWC,KAAM,GAAGC,SAAA,EACnCC,EAAAA,EAAAA,KAACX,EAAW,CAACY,SAZQC,CAACC,EAAOC,KAC/BX,EAAiBU,EAAM,KAYrBH,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CAACC,KAAK,UAAUC,QATNC,KACnB,MAAOC,EAAWC,GAAWlB,EAC7BmB,QAAQC,IAAI,cAAeH,EAAYA,EAAUI,cAAgB,0BACjEF,QAAQC,IAAI,YAAaF,EAAUA,EAAQG,cAAgB,uBAAuB,EAMnCd,SAAC,aAGxC,C","sources":["views/customer/Text.jsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\n// import PropTypes from 'prop-types'\n// // import { getFetch } from 'src/api/Api'\n// const PatientAddNewRecord = ({ _id }) => {\n//   console.log('_id', _id)\n//   PatientAddNewRecord.propTypes = {\n//     _id: PropTypes.func.isRequired,\n//   }\n\n//   const [patientById, setPatientById] = useState({})\n//   const [problems, setProblems] = useState([\n//     {\n//       problem: 'pain',\n//     },\n//     {\n//       problem: 'pain2',\n//     },\n//   ])\n//   const [formData, setFormData] = useState({\n//     diagnosis: [problems],\n//     desc: '',\n//   })\n//   const [diagnosis, setDiagnosis] = useState(\n//     problems.map((problem) => ({\n//       problem: {\n//         name: problem.problem,\n//         scale1: '',\n//         scale2: '',\n//         scale3: '',\n//       },\n//       date: Date.now(),\n//     })),\n//   )\n\n//   const handleCheckboxChange = (problemName, checked) => {\n//     if (checked) {\n//       setDiagnosis((prevDiagnosis) => [\n//         ...prevDiagnosis,\n//         {\n//           problem: {\n//             name: problemName,\n//             scale1: '',\n//             scale2: '',\n//             scale3: '',\n//           },\n//           date: Date.now(),\n//           // desc: '',\n//         },\n//       ])\n//     } else {\n//       setDiagnosis((prevDiagnosis) =>\n//         prevDiagnosis.filter((item) => item.problem.name !== problemName),\n//       )\n//     }\n//   }\n\n//   const handleInputChange = (index, key, value) => {\n//     setDiagnosis((prevDiagnosis) =>\n//       prevDiagnosis.map((item, i) => {\n//         if (i === index) {\n//           return {\n//             ...item,\n//             problem: {\n//               ...item.problem,\n//               [key]: value,\n//             },\n//           }\n//         }\n//         return item\n//       }),\n//     )\n//   }\n\n//   // const getPatientById = async () => {\n//   //   try {\n//   //     // const data = await getFetch(`http://localhost:8090/api/patient/${_id}`)\n//   //     setPatientById(data.data.data)\n//   //   } catch (error) {\n//   //     console.log(error)\n//   //   }\n//   // }\n\n//   const handleSubmit = (e) => {\n//     try {\n//       e.preventDefault()\n//       const updatedFormData = {\n//         ...formData,\n//         diagnosis: diagnosis,\n//       }\n//       console.log('updatedFormData', updatedFormData)\n//     } catch (error) {\n//       console.log(error)\n//     }\n//   }\n\n//   useEffect(() => {\n//     // getPatientById()\n//   }, [])\n//   return (\n//     <div style={{ margin: '1rem auto 1rem 1rem' }}>\n//       <div style={{ margin: '1rem auto 1rem 0' }}>\n//         <h4>Diagnosis</h4>\n//         <div className=\"row\">\n//           <div className=\"row\">\n//             <div className=\"col-md-4 alignCenterAndMiddle\" style={{ border: '1px solid black' }}>\n//               <h5 style={{ marginTop: '0.5rem' }}>Problems</h5>\n//             </div>\n//             <div className=\"col-md-8\">\n//               <div className=\"row\" style={{ border: '1px solid black' }}>\n//                 <div className=\"col-md-4 alignCenterAndMiddle\">\n//                   <h5 style={{ marginTop: '0.5rem' }}>LAS</h5>\n//                 </div>\n//                 <div className=\"col-md-4 alignCenterAndMiddle\">\n//                   <h5 style={{ marginTop: '0.5rem' }}>MPSJ</h5>\n//                 </div>\n//                 <div className=\"col-md-4 alignCenterAndMiddle\">\n//                   <h5 style={{ marginTop: '0.5rem' }}>OPI</h5>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <form>\n//         {problems.map((problem, index) => (\n//           <div key={index} style={{ alignItems: 'center', marginBottom: '10px' }}>\n//             <div className=\"row\">\n//               <div className=\"col-md-4\">\n//                 <input\n//                   type=\"checkbox\"\n//                   value={problem.problem}\n//                   onChange={(e) => handleCheckboxChange(problem.problem, e.target.checked)}\n//                 />\n//                 <label>{problem.problem}</label>\n//               </div>\n//               <div className=\"col-sm-8\">\n//                 <div className=\"row\">\n//                   <div className=\"col-sm-4\">\n//                     <input\n//                       className=\"form-control\"\n//                       type=\"text\"\n//                       placeholder=\"Scale 1\"\n//                       value={\n//                         diagnosis.find((item) => item.problem.name === problem.problem)?.problem\n//                           .scale1 || ''\n//                       }\n//                       onChange={(e) => handleInputChange(index, 'scale1', e.target.value)}\n//                     />\n//                   </div>\n//                   <div className=\"col-sm-4\">\n//                     <input\n//                       className=\"form-control\"\n//                       type=\"text\"\n//                       placeholder=\"Scale 2\"\n//                       value={\n//                         diagnosis.find((item) => item.problem.name === problem.problem)?.problem\n//                           .scale2 || ''\n//                       }\n//                       onChange={(e) => handleInputChange(index, 'scale2', e.target.value)}\n//                     />\n//                   </div>\n//                   <div className=\"col-sm-4\">\n//                     <input\n//                       className=\"form-control\"\n//                       type=\"text\"\n//                       placeholder=\"Scale 3\"\n//                       value={\n//                         diagnosis.find((item) => item.problem.name === problem.problem)?.problem\n//                           .scale3 || ''\n//                       }\n//                       onChange={(e) => handleInputChange(index, 'scale3', e.target.value)}\n//                     />\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         ))}\n//       </form>\n//       <div>\n//         <textarea\n//           rows={4}\n//           className=\"form-control col-12\"\n//           placeholder=\"prescription\"\n//           name=\"desc\"\n//           value={patientById.desc}\n//           //   onChange={handleChange}\n//         ></textarea>\n//       </div>\n\n//       <button onClick={handleSubmit}>submit</button>\n//     </div>\n//   )\n// }\n\n// export default PatientAddNewRecord\n\nimport React, { useState } from 'react'\nimport { DatePicker, Space, Button } from 'antd'\n\nconst { RangePicker } = DatePicker\n\nconst App = () => {\n  const [selectedDates, setSelectedDates] = useState([])\n\n  const handleDateChange = (dates, dateStrings) => {\n    setSelectedDates(dates)\n  }\n\n  const handleSubmit = () => {\n    const [startDate, endDate] = selectedDates\n    console.log('Start Date:', startDate ? startDate.toISOString() : 'No start date selected')\n    console.log('End Date:', endDate ? endDate.toISOString() : 'No end date selected')\n  }\n\n  return (\n    <Space direction=\"vertical\" size={12}>\n      <RangePicker onChange={handleDateChange} />\n      <Button type=\"primary\" onClick={handleSubmit}>\n        Submit\n      </Button>\n    </Space>\n  )\n}\n\nexport default App\n"],"names":["RangePicker","DatePicker","App","selectedDates","setSelectedDates","useState","_jsxs","Space","direction","size","children","_jsx","onChange","handleDateChange","dates","dateStrings","Button","type","onClick","handleSubmit","startDate","endDate","console","log","toISOString"],"sourceRoot":""}